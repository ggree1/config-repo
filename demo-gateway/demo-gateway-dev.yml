# http://localhost/demo-service1/hello/dk
# http://localhost/hello/dk
# would have the same result by using serviceId

zuul:
  debug:
    request: true
  routes:
    demo-service1: # http://demo-service1/hello/** 로 들어오는 요청은 하단 serviceId (유레카에 등록된 이름) 서비스로 전송된다.
      #stripPrefix: false
      path: /hello/**
      url: http://localhost:8081/hello/
      serviceId: demo-service1
    demo-service2:
      #stripPrefix: false
      path: /bye/**
      url: http://localhost:8082/bye/
      serviceId: demo-service2
    rest-service:
      path: /v1/**
      url: http://localhost:8083/v1/** # url 없으면 유레카에 등록된 application.name(serviceId) 로 전달한다. (url 굳이 필요 없다)
      serviceId: rest-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# http://localhost/actuator/routes

#zuul:
#  routes:
#    newApiServiceName:
#      path: info/notice/**
#      url: http://newApiServiceDomain/v1/notice
#    legacyApiServiceName:
#      path: /**
#      url: http://legacyApiServiceDomain


#hystrix:
#  command:
#    demo-service1:
#      execution:
#        isolation:
#          thread:
#            # Ribbon의 각 timeout보다 커야 기대하는대로 동작함
#            timeoutInMilliseconds: 5000
#
#    demo-service2:
#      execution:
#        isolation:
#          thread:
#            # Ribbon의 각 timeout보다 커야 기대하는대로 동작함
#            timeoutInMilliseconds: 5000
#
#demo-service1:
#  ribbon:
#    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
#    ConnectTimeout: 1000
#    ReadTimeout: 3000
#    MaxTotalHttpConnections: 500
#    MaxConnectionsPerHost: 100
#
#demo-service2:
#  ribbon:
#    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
#    ConnectTimeout: 1000
#    ReadTimeout: 3000
#    MaxTotalHttpConnections: 500
#    MaxConnectionsPerHost: 100