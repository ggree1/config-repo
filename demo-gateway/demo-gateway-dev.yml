# http://localhost/demo-service1/hello/dk
# http://localhost/hello/dk
# would have the same result by using serviceId
# 서비스들중에 path: ** 로 주면 zuul서버에 대한 /actuator/routes 도 아래 서비스에서 실행되어 동작 안하게 된다.

zuul:
  debug:
    request: true
  routes:
    demo-service1: # http://demo-service1/hello/** 로 들어오는 요청은 하단 serviceId (유레카에 등록된 이름) 서비스로 전송된다.
      path: /demo1/**
      serviceId: demo-service1
      #url: http://localhost:8081/demo1/
      #stripPrefix: false
    demo-service2:
      path: /demo2/**
      serviceId: demo-service2
      #url: http://localhost:8082/demo2/
      #stripPrefix: false
    rest-service:
      path: /api/**
      serviceId: rest-service
      #url: http://localhost:8083/api/ # url 없으면 유레카에 등록된 application.name(serviceId) 로 전달한다. (url 굳이 필요 없다)
      #stripPrefix: false

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

# http://localhost/actuator/routes

#zuul:
#  routes:
#    newApiServiceName:
#      path: info/notice/**
#      url: http://newApiServiceDomain/v1/notice
#    legacyApiServiceName:
#      path: /**
#      url: http://legacyApiServiceDomain


#hystrix:
#  command:
#    demo-service1:
#      execution:
#        isolation:
#          thread:
#            # Ribbon의 각 timeout보다 커야 기대하는대로 동작함
#            timeoutInMilliseconds: 5000
#
#    demo-service2:
#      execution:
#        isolation:
#          thread:
#            # Ribbon의 각 timeout보다 커야 기대하는대로 동작함
#            timeoutInMilliseconds: 5000
#
#demo-service1:
#  ribbon:
#    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
#    ConnectTimeout: 1000
#    ReadTimeout: 3000
#    MaxTotalHttpConnections: 500
#    MaxConnectionsPerHost: 100
#
#demo-service2:
#  ribbon:
#    NIWSServerListClassName: com.netflix.loadbalancer.ConfigurationBasedServerList
#    ConnectTimeout: 1000
#    ReadTimeout: 3000
#    MaxTotalHttpConnections: 500
#    MaxConnectionsPerHost: 100